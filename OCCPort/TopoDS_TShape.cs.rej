diff a/OCCPort/TopoDS_TShape.cs b/OCCPort/TopoDS_TShape.cs	(rejected hunks)
@@ -42,19 +42,37 @@ namespace OCCPort
 
 		int myFlags;
 
-        internal bool Free()
-        {
-            throw new NotImplementedException();
-        }
 
-        internal void Free(bool theIsFree)
-        {
-            throw new NotImplementedException();
-        }
+		//! Returns the free flag.
+		public bool Free() { return ((myFlags & (int)TopoDS_TShape_Flags.TopoDS_TShape_Flags_Free) != 0); }
+
+		//! Sets the free flag.
+		public void Free(bool theIsFree) { setFlag(TopoDS_TShape_Flags.TopoDS_TShape_Flags_Free, theIsFree); }
+
+
+
 
-        internal void Modified(bool v)
+		//! Returns the modification flag.
+		public bool Modified() { return ((myFlags & (int)TopoDS_TShape_Flags.TopoDS_TShape_Flags_Modified) != 0); }
+
+		//! Sets the modification flag.
+		public void Modified(bool theIsModified)
 		{
-            throw new NotImplementedException();
+			setFlag(TopoDS_TShape_Flags.TopoDS_TShape_Flags_Modified, theIsModified);
+			if (theIsModified)
+			{
+				setFlag(TopoDS_TShape_Flags.TopoDS_TShape_Flags_Checked, false); // when a TShape is modified it is also unchecked
 			}
 		}
+
+
+
+		//! Returns the locked flag.
+		public bool Locked() { return ((myFlags & (int)TopoDS_TShape_Flags.TopoDS_TShape_Flags_Locked) != 0); }
+
+		//! Sets the locked flag.
+		public void Locked(bool theIsLocked) { setFlag(TopoDS_TShape_Flags.TopoDS_TShape_Flags_Locked, theIsLocked); }
+
+
+	}
 }
\ No newline at end of file
